# -- coding: utf-8 --
import asyncio
import requests
from telegram import Bot

# Token do seu bot obtido do BotFather
bot_token = '7316357488:AAHQbiCSpCqrDZgmfi25vJs2roXInS1aFCU'  # Substitua pelo seu token do BotFather

# ID do canal para onde a mensagem ser√° enviada (deve come√ßar com @ para canais p√∫blicos)
channel_id = '@canalontste0'  # Substitua pelo ID do seu canal

# Fun√ß√£o ass√≠ncrona para enviar uma mensagem para o canal no Telegram
async def enviar_mensagem_no_canal(mensagem):
    bot = Bot(token=bot_token)
    await bot.send_message(chat_id=channel_id, text=mensagem)

# Fun√ß√£o para buscar e enviar detalhes dos animes lan√ßados hoje
async def enviar_detalhes_animes_lancados_hoje():
    try:
        # Realizar uma solicita√ß√£o GET para a rota /animes-lancados-hoje da sua aplica√ß√£o
        response = requests.get('https://saikanet.online:3000/animes-lancados-hoje')

        # Verificar se a resposta cont√©m dados v√°lidos
        if response.status_code == 200:
            data = response.json()

            # Verificar se os dados s√£o uma lista
            if isinstance(data, list):
                # Iterar sobre os animes retornados
                for anime in data:
                    # Formatar a mensagem com os detalhes do anime
                    mensagem = ('üì∫ *Detalhes do Anime: {titulo}*\n\n'
                                '*T√≠tulo:* {titulo}\n'
                                '*Selo:* {selo}\n'
                                '*Sinopse:* {sinopse}\n\n'
                                'Mais detalhes: Insira o link aqui').format(
                                    titulo=anime["titulo"],
                                    selo=anime["selo"],
                                    sinopse=anime["sinopse"])

                    # Enviar mensagem para o canal no Telegram
                    await enviar_mensagem_no_canal(mensagem)

                print('Detalhes dos animes lan√ßados hoje enviados com sucesso para o canal!')
            else:
                print('Resposta inv√°lida da rota /animes-lancados-hoje:', data)
        else:
            print('Erro ao buscar detalhes dos animes lan√ßados hoje:', response.status_code)
    except Exception as e:
        print('Erro ao buscar ou enviar detalhes dos animes lan√ßados hoje:', str(e))

# Fun√ß√£o principal para iniciar o processo ass√≠ncrono
async def main():
    await enviar_detalhes_animes_lancados_hoje()

# Iniciar o loop de eventos ass√≠ncronos
if __name__ == '__main__':
    asyncio.run(main())
